taskcluster:
  adminRoles:
    - github-team:taskcluster/core
  repos:
    - github.com/taskcluster/*
    - github.com/json-e/json-e:*
    - github.com/taskcluster/community-tc-config:*
    - github.com/mozilla/hawk:*
  externallyManaged:
    # smoketests create these resources, and also cleans them up, so leave
    # them alone here...
    - "Client=project/taskcluster/smoketest/.*"
    - "Role=project:taskcluster:smoketest:.*"
  workerPools:
    ci:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: false
      imageset: generic-worker-ubuntu-24-04
      cloud: gcp
      minCapacity: 0
      maxCapacity: 10
      workerConfig:
        genericWorker:
          config:
            headlessTasks: true

    release:
      owner: taskcluster-notifications+workers@mozilla.com
      description: "Trusted worker to build Taskcluster releases (only!)"
      emailOnError: true
      imageset: generic-worker-ubuntu-24-04
      cloud: gcp
      minCapacity: 0
      maxCapacity: 1
      workerConfig:
        genericWorker:
          config:
            headlessTasks: true
            runTasksAsCurrentUser: true

    # gw-ci-* worker pools are for generic-worker CI
    # they all have `runTasksAsCurrentUser: true` in
    # their config so that they can run generic-worker
    # as root user in tests. this should not be used
    # by any other CI tasks!
    gw-ci-macos:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker
      cloud: static
      lifecycle:
        reregistrationTimeout: 2592000 # 30 days
      # note: workerConfig not specified here as configuration
      # is stored directly on manually provisioned worker

    gw-ci-freebsd:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker
      cloud: static
      lifecycle:
        reregistrationTimeout: 2592000 # 30 days

    gw-dev-windows:
      cloud: static
      description: Typically developer (Windows) machines that can be used for testing features,
        where a user has physical access to the machine, and probably set it up as a worker
        directly themselves.
      emailOnError: true
      imageset: generic-worker
      lifecycle:
        reregistrationTimeout: 2592000 # 30 days
      owner: taskcluster-notifications+workers@mozilla.com
      workerConfig:
        genericWorker:
          config:
            ed25519SigningKeyLocation: C:\generic-worker\generic-worker-ed25519-signing-key.key
            idleTimeoutSecs: 3600
            livelogExecutable: C:\generic-worker\livelog.exe
            sentryProject: generic-worker
            shutdownMachineOnIdle: false
            shutdownMachineOnInternalError: false
            taskclusterProxyExecutable: C:\generic-worker\taskcluster-proxy.exe
            wstAudience: communitytc
            wstServerURL: https://community-websocktunnel.services.mozilla.com

    gw-dev-ubuntu:
      cloud: static
      description: Typically developer (Ubuntu) machines that can be used for testing features,
        where a user has physical access to the machine, and probably set it up as a worker
        directly themselves.
      emailOnError: true
      imageset: generic-worker
      lifecycle:
        reregistrationTimeout: 2592000 # 30 days
      owner: taskcluster-notifications+workers@mozilla.com
      workerConfig:
        genericWorker:
          config:
            ed25519SigningKeyLocation: /etc/generic-worker/ed25519_key
            idleTimeoutSecs: 3600
            livelogExecutable: /usr/local/bin/livelog
            sentryProject: generic-worker
            shutdownMachineOnIdle: false
            shutdownMachineOnInternalError: false
            taskclusterProxyExecutable: /usr/local/bin/taskcluster-proxy
            wstAudience: communitytc
            wstServerURL: https://community-websocktunnel.services.mozilla.com

    gw-ci-ubuntu-24-04:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-ubuntu-24-04
      cloud: gcp
      minCapacity: 0
      maxCapacity: 20
      workerConfig:
        genericWorker:
          config:
            # Note, headlessTasks: false is _already_ default, but adding here
            # to be explicit! The gw-ci pools are used for Generic Worker CI
            # tasks, and some of those tests require a real GUI, such as
            # TestDesktopResizeAndMovePointer, in which case the host will need
            # a GUI, and thus we shouldn't enable Headless (disable GUI) on the
            # CI environment itself.
            headlessTasks: false
            runTasksAsCurrentUser: true

    gw-ci-windows-2022:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-win2022
      cloud: azure
      minCapacity: 0
      maxCapacity: 10
      workerConfig:
        genericWorker:
          config:
            # Note, headlessTasks: false is _already_ default, but adding here
            # to be explicit! The gw-ci pools are used for Generic Worker CI
            # tasks, and some of those tests require a real GUI, such as
            # TestDesktopResizeAndMovePointer, in which case the host will need
            # a GUI, and thus we shouldn't enable Headless (disable GUI) on the
            # CI environment itself.
            headlessTasks: false
            runTasksAsCurrentUser: true

    gw-ubuntu-24-04-metal:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-ubuntu-24-04-staging
      cloud: aws
      minCapacity: 0
      maxCapacity: 1
      workerConfig:
        genericWorker:
          config:
            headlessTasks: true
            # this pool isn't in regular use, and when we use it, it is
            # typically for testing bare metal stuff, so nice to have
            # longer timeout
            idleTimeoutSecs: 3600
            # if worker crashes in this pool, we typically want to know
            # why (worker manager will eventually kill it anyway)
            shutdownMachineOnInternalError: false
      # Use c5.metal to test kvm
      instanceTypes:
        m5d.metal: 1

    gw-ubuntu-24-04:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-ubuntu-24-04
      cloud: gcp
      minCapacity: 0
      maxCapacity: 50
      workerConfig:
        genericWorker:
          config:
            headlessTasks: true

    gw-ubuntu-24-04-arm64:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-ubuntu-24-04-arm64
      cloud: gcp
      minCapacity: 0
      maxCapacity: 5
      workerConfig:
        genericWorker:
          config:
            headlessTasks: true
      machineType: "zones/{zone}/machineTypes/t2a-standard-4"

    gw-ubuntu-staging-aws:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-ubuntu-24-04-staging
      cloud: aws
      minCapacity: 0
      maxCapacity: 1
      workerConfig:
        genericWorker:
          config:
            headlessTasks: true
            # While iterating on the image building process for this worker
            # pool, useful for workers not to die immediately...
            idleTimeoutSecs: 3600
            # if worker crashes in this pool, we typically want to know
            # why (worker manager will eventually kill it anyway)
            shutdownMachineOnInternalError: false

    gw-ubuntu-staging-google:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-ubuntu-24-04-staging
      cloud: gcp
      minCapacity: 0
      maxCapacity: 1
      workerConfig:
        genericWorker:
#         files:
#           - description:
#               |-
#               core dump file settings - eqivalent to `sysctl -w kernel.core_pattern=core`
#             format: file
#             encoding: base64
#             path: /proc/sys/kernel/core_pattern
#             content: 'Y29yZQo='
          config:
            headlessTasks: true
            # While iterating on the image building process for this worker
            # pool, useful for workers not to die immediately...
            idleTimeoutSecs: 3600
            # if worker crashes in this pool, we typically want to know
            # why (worker manager will eventually kill it anyway)
            shutdownMachineOnInternalError: false

    gw-windows-2022:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-win2022
      cloud: azure
      minCapacity: 0
      maxCapacity: 10
      workerConfig:
        genericWorker:
          config:
            headlessTasks: true

    gw-windows-2022-staging:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-win2022-staging
      cloud: azure
      minCapacity: 0
      maxCapacity: 1
      # Currently staging uses a GPU pool so we can also test GPU related changes
      vmSizes:
        Standard_NV12s_v3: 1
      workerConfig:
        genericWorker:
          config:
            # Currently staging is using GPU pool, so enable GUI. This also
            # matches what Release SRE have, for the purposes of testing
            # https://github.com/taskcluster/taskcluster/issues/7303.
            headlessTasks: false
            # While iterating on the image building process for this worker
            # pool, useful for workers not to die immediately...
            idleTimeoutSecs: 3600
            # if worker crashes in this pool, we typically want to know
            # why (worker manager will eventually kill it anyway)
            shutdownMachineOnInternalError: false
            # See https://github.com/taskcluster/taskcluster/issues/7303
            # Useful for testing feature runAfterUserCreation; calc.exe returns exit code 0
            runAfterUserCreation: C:\Windows\System32\calc.exe

    gw-windows-2022-gpu:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-win2022-gpu
      cloud: azure
      minCapacity: 0
      maxCapacity: 3
      vmSizes:
        Standard_NV12s_v3: 1
      workerConfig:
        genericWorker:
          config:
            # Headless on GPU instances might make sense if using e.g. CUDA
            # but generally GPU useful when GUI is enabled.
            headlessTasks: false

    gw-windows-11-24h2-staging:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: generic-worker-win11-24h2-staging
      cloud: azure
      minCapacity: 0
      maxCapacity: 1
      vmSizes:
        # To match what Release SRE have on their Windows 11 24H2 pools...
        Standard_F8s_v2: 1
      workerConfig:
        genericWorker:
          config:
            # Same as Release SRE
            headlessTasks: false
            # While iterating on the image building process for this worker
            # pool, useful for workers not to die immediately...
            idleTimeoutSecs: 3600
            # if worker crashes in this pool, we typically want to know
            # why (worker manager will eventually kill it anyway)
            shutdownMachineOnInternalError: false
            # See https://github.com/taskcluster/taskcluster/issues/7303
            # Useful for testing feature runAfterUserCreation; calc.exe returns exit code 0
            runAfterUserCreation: C:\Windows\System32\calc.exe

    old-docker-worker:
      owner: taskcluster-notifications+workers@mozilla.com
      emailOnError: true
      imageset: docker-worker
      cloud: gcp
      securityGroups:
        - ssh
      minCapacity: 0
      maxCapacity: 2
      workerConfig:
        dockerConfig:
          allowPrivileged: true

  grants:
    - grant:
        - notify:manage-denylist
        # This is the taskcluster channel
        - queue:route:notify.matrix-room.!whDRjjSmICCgrhFHsQ:mozilla.org.*
      to:
        - project-admin:taskcluster

    - grant:
        - queue:create-task:highest:proj-taskcluster/ci
        # For replacing the docker-worker pool (proj-taskcluster/ci) for d2g work
        - queue:create-task:highest:proj-taskcluster/gw-ubuntu-24-04
        - queue:create-task:highest:proj-taskcluster/windows2012r2-amd64-ci
        # The account and secret for the Azure testing storage account.
        # This is secret but ok for use by PRs.
        - secrets:get:project/taskcluster/testing/azure
        # This is the taskcluster channel
        - queue:route:notify.matrix-room.!whDRjjSmICCgrhFHsQ:mozilla.org.*
      to: repo:github.com/taskcluster/*

    - grant:
        - queue:create-task:highest:proj-taskcluster/ci
      to: repo:github.com/mozilla/hawk:*

    - grant:
        - secrets:get:project/taskcluster/testing/client-libraries
        - secrets:get:project/taskcluster/testing/taskcluster-*
        - docker-worker:cache:taskcluster-*
        # can remove once https://github.com/taskcluster/taskcluster/pull/7343
        # is released and deployed on the decision workers
        - generic-worker:cache:taskcluster-*
      to: repo:github.com/taskcluster/taskcluster:*

    - grant:
        - queue:create-task:highest:proj-taskcluster/release
        - secrets:get:project/taskcluster/release
      to: repo:github.com/taskcluster/taskcluster:tag:v*

    - grant:
        - queue:create-task:highest:proj-taskcluster/release
        - secrets:get:project/taskcluster/staging-release
      to:
        # both pre- and post-bug-1635455
        - repo:github.com/taskcluster/taskcluster:branch:staging-release/*
        - repo:github.com/taskcluster/staging-releases:*

    - grant:
        # pushes to main and releases can notify on failure
        - queue:route:notify.email.taskcluster-internal@mozilla.com.*
        - queue:route:notify.email.taskcluster-notifications@mozilla.com.*
        - queue:route:notify.irc-channel.#taskcluster-bots.*
      to:
        - repo:github.com/taskcluster/taskcluster:branch:main
        - repo:github.com/taskcluster/taskcluster:tag:v*

    - grant:
        - queue:create-task:highest:proj-taskcluster/ci
      to: repo:github.com/json-e/json-e:*

    - grant:
        # pushes to json-e main can read secrets for deploying the site
        - secrets:get:project/taskcluster/json-e-deploy
        # ..and notify on failure
        - queue:route:notify.email.taskcluster-notifications@mozilla.com.*
      to: repo:github.com/json-e/json-e:branch:main

    - grant:
        - assume:project:taskcluster:worker-test-scopes
        - assume:worker-id:docker-worker/docker-worker
        - assume:worker-id:random-local-worker/docker-worker
        - docker-worker:cache:docker-worker-garbage-*
        - docker-worker:capability:device:hostSharedMemory
        - docker-worker:capability:device:hostSharedMemory:null-provisioner/*
        - docker-worker:capability:device:loopbackAudio
        - docker-worker:capability:device:loopbackAudio:null-provisioner/*
        - docker-worker:capability:device:loopbackVideo
        - docker-worker:capability:device:loopbackVideo:null-provisioner/*
        - docker-worker:capability:disableSeccomp
        - docker-worker:capability:disableSeccomp:null-provisioner/*
        - docker-worker:capability:privileged
        - docker-worker:capability:privileged:null-provisioner/*
        - docker-worker:image:localhost:*
        - purge-cache:null-provisioner/*
        - queue:cancel-task
        - queue:cancel-task-group:taskcluster-level-1/*
        - queue:cancel-task:docker-worker-tests/*
        - queue:claim-task
        - queue:claim-task:null-provisioner/*
        - queue:claim-work:null-provisioner/*
        - queue:create-artifact:*
        - queue:create-task:lowest:null-provisioner/*
        - queue:create-task:lowest:proj-taskcluster/ci
        - queue:get-artifact:private/docker-worker-tests/*
        - queue:rerun-task:taskcluster-level-1/*
        - queue:resolve-task
        - queue:route:statuses
        - queue:scheduler-id:docker-worker-tests
        - queue:scheduler-id:taskcluster-github
        - queue:seal-task-group:taskcluster-level-1/*
        - queue:worker-id:docker-worker/docker-worker
        - queue:worker-id:random-local-worker/docker-worker
        - queue:worker-id:random-local-worker/dummy-worker-*
        - secrets:get:project/taskcluster/taskcluster-worker/stateless-dns
        - secrets:get:project/taskcluster/testing/docker-worker/ci-creds
        - secrets:get:project/taskcluster/testing/docker-worker/pulse-creds
      to:
        - repo:github.com/taskcluster/taskcluster:*
        - project:taskcluster:docker-worker-tester

    - grant: assume:project:taskcluster:docker-worker-tester
      to: login-identity:github/54458|catlee

    - grant:
        - auth:create-client:project/taskcluster/smoketest/*
        - auth:create-role:project:taskcluster:smoketest:*
        - auth:delete-client:project/taskcluster/smoketest/*
        - auth:delete-role:project:taskcluster:smoketest:*
        - auth:reset-access-token:project/taskcluster/smoketest/*
        - auth:update-client:project/taskcluster/smoketest/*
        - auth:update-role:project:taskcluster:smoketest:*
        - project:taskcluster:smoketest:*
        - purge-cache:built-in/succeed:smoketest-cache
        - queue:create-task:highest:built-in/*
        - queue:create-task:highest:built-in/fail
        - queue:create-task:highest:built-in/succeed
        - queue:route:index.project.taskcluster.smoketest.*
        - queue:scheduler-id:smoketest
        - secrets:get:project/taskcluster/smoketest/*
        - secrets:set:project/taskcluster/smoketest/*
      to: project:taskcluster:smoketests

    - grant: assume:project:taskcluster:smoketests
      to: github-team:taskcluster/smoketesters

    - grant:
        - assume:worker-id:test-worker-group/test-worker-id
        - assume:worker-pool:test-provisioner/*
        - assume:worker-type:test-provisioner/*
        - auth:create-client:project/taskcluster:generic-worker-tester/TestReclaimCancelledTask
        - auth:create-client:project/taskcluster:generic-worker-tester/TestResolveResolvedTask
        - auth:sentry:generic-worker-tests
        - docker-worker:cache:d2g-test
        - docker-worker:capability:privileged:test-provisioner/test-*
        - docker-worker:capability:device:hostSharedMemory:test-provisioner/test-*
        - docker-worker:capability:device:kvm:test-provisioner/test-*
        - docker-worker:capability:device:loopbackAudio
        - docker-worker:capability:device:loopbackAudio:test-provisioner/test-*
        - docker-worker:capability:device:loopbackVideo
        - docker-worker:capability:device:loopbackVideo:test-provisioner/test-*
        - docker-worker:feature:allowPtrace
        - generic-worker:cache:apple-cache
        - generic-worker:cache:banana-cache
        - generic-worker:cache:devtools-app
        - generic-worker:cache:test-modifications
        - generic-worker:cache:unknown-issuer-app-cache
        - generic-worker:os-group:test-provisioner/*
        - generic-worker:run-as-administrator:test-provisioner/*
        - generic-worker:run-task-as-current-user:test-provisioner/*
        - generic-worker:loopback-audio:test-provisioner/test-*
        - generic-worker:loopback-video:test-provisioner/test-*
        - index:find-task:garbage.generic-worker-tests.*
        - index:insert-task:garbage.generic-worker-tests.*
        - queue:cancel-task:test-scheduler/*
        - queue:create-artifact:public/*
        - queue:create-task:highest:test-provisioner/*
        - queue:get-artifact:SampleArtifacts/_/X.txt
        - queue:get-artifact:SampleArtifacts/_/non-existent-artifact.txt
        - queue:get-artifact:SampleArtifacts/b/c/d.jpg
        - queue:resolve-task
        - queue:scheduler-id:test-scheduler
      to: project:taskcluster:generic-worker-tester

    - grant:
        - assume:project:taskcluster:generic-worker-tester
        - queue:create-task:highest:proj-taskcluster/*
        - generic-worker:cache:generic-worker-checkout
        - secrets:get:project/taskcluster/testing/generic-worker/ci-creds
        - queue:scheduler-id:taskcluster-level-1
        - queue:route:checks
        - queue:route:index.taskcluster.cache.pr.docker-images.v2.*
        - queue:route:index.taskcluster.cache.level-1.docker-images.v2.*
      to:
        - repo:github.com/taskcluster/taskcluster:*
        - repo:github.com/taskcluster/staging-releases:*

    - grant:
        - queue:create-task:medium:proj-taskcluster/gw-ci-ubuntu-24-04
      to:
        - repo:github.com/taskcluster/docker-exec-websocket-server:*
        - repo:github.com/taskcluster/docker-exec-websocket-client:*

  clients:
    smoketest:
      scopes:
        - assume:project:taskcluster:smoketests
    docker-worker/ci:
      scopes:
        - assume:project:taskcluster:docker-worker-tester
    # Client for workerpool proj-taskcluster/gw-ci-macos.
    generic-worker/ci-macos:
      scopes:
        - assume:worker-pool:proj-taskcluster/gw-ci-macos
        - assume:worker-id:proj-taskcluster/*
    # A client whose clientId and accessToken are stored in taskcluster secret
    # `project/taskcluster/testing/generic-worker/ci-creds` and used by
    # commands in generic-worker's .taskcluster.yml to create production tasks
    # that are then claimed and processed by the generic-worker build under
    # test.
    generic-worker/taskcluster-ci:
      scopes:
        - assume:project:taskcluster:generic-worker-tester
    # This client is used to test the client libraries in Taskcluster CI
    # Its access token is in `community-tc-secret-values.yml`.
    testing/client-libraries:
      scopes:
        - "object:upload:taskcluster:taskcluster/test/*"
        - "object:download:taskcluster/test/*"
    # Running periodic audits and worker version reports
    audit-reports:
      scopes:
        - "queue:create-task:lowest:*"
        - "queue:scheduler-id:audit"
  secrets:
    # client_id/access_token for project/taskcluster/testing/docker-worker/ci-creds
    testing/docker-worker/ci-creds: true
    # client_id/access_token for generic-worker integration tests
    testing/generic-worker/ci-creds: true
    testing/azure:
      AZURE_ACCOUNT: $taskcluster-azure-account
      AZURE_ACCOUNT_KEY: $taskcluster-azure-account-key

    testing/taskcluster-auth: true
      # auth's secrets contain a GCP credential which has too many parts
      # to try to encode in secret values

    testing/taskcluster-notify:
      AWS_ACCESS_KEY_ID: $taskcluster-notify-aws-access-key-id
      AWS_SECRET_ACCESS_KEY: $taskcluster-notify-aws-secret-access-key

    testing/taskcluster-queue:
      AWS_ACCESS_KEY_ID: $taskcluster-queue-aws-access-key-id
      AWS_SECRET_ACCESS_KEY: $taskcluster-queue-aws-secret-access-key
      PUBLIC_ARTIFACT_BUCKET: $taskcluster-queue-public-bucket
      PRIVATE_ARTIFACT_BUCKET: $taskcluster-queue-private-bucket
      ARTIFACT_REGION: $taskcluster-queue-region

    testing/taskcluster-object:
      # Note, test bucket was created manually, tests do not dynamically create buckets.
      AWS_ACCESS_KEY_ID: $taskcluster-object-aws-access-key-id
      AWS_SECRET_ACCESS_KEY: $taskcluster-object-aws-secret-access-key
      AWS_TEST_BUCKET: $taskcluster-object-aws-test-bucket
      # Google backend stores objects using Amazon S3 protocol via interoperability API
      # See https://cloud.google.com/storage/docs/interoperability
      # These credentials are used for object service google backend unit tests.
      # Note, test bucket was created manually, tests do not dynamically create buckets.
      GOOGLE_ACCESS_KEY_ID: $taskcluster-object-google-access-key-id
      GOOGLE_SECRET_ACCESS_KEY: $taskcluster-object-google-secret-access-key
      GOOGLE_TEST_BUCKET: $taskcluster-object-google-test-bucket

    testing/client-libraries:
      TASKCLUSTER_CLIENT_ID: project/taskcluster/testing/client-libraries
      TASKCLUSTER_ACCESS_TOKEN: $taskcluster-testing-client-libraries-access-token

    # key for deploying json-e docs; this corresponds to a "deploy key" on the
    # json-e/json-e github repo.
    json-e-deploy: true
    release:
      DOCKER_USERNAME: $taskcluster-release-docker-hub-username
      DOCKER_PASSWORD: $taskcluster-release-docker-hub-password
      PYPI_USERNAME: $taskcluster-release-pypi-username
      PYPI_PASSWORD: $taskcluster-release-pypi-password
      NPM_TOKEN: $taskcluster-release-npm-token
      GH_TOKEN: $taskcluster-release-gh-token
      CRATESIO_TOKEN: $taskcluster-release-cratesio-token
    staging-release:
      GH_TOKEN: $taskcluster-staging-release-gh-token

  hooks: []
